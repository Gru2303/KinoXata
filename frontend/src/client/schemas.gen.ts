// This file is auto-generated by @hey-api/openapi-ts

export const AdminStatsResponseSchema = {
  properties: {
    users: {
      type: 'integer',
      title: 'Users',
    },
    films: {
      type: 'integer',
      title: 'Films',
    },
    sessions: {
      type: 'integer',
      title: 'Sessions',
    },
    tickets_sell: {
      type: 'integer',
      title: 'Tickets Sell',
    },
    month_money: {
      type: 'number',
      title: 'Month Money',
    },
    week_money: {
      type: 'number',
      title: 'Week Money',
    },
  },
  type: 'object',
  required: [
    'users',
    'films',
    'sessions',
    'tickets_sell',
    'month_money',
    'week_money',
  ],
  title: 'AdminStatsResponse',
} as const

export const AdminUserRequestSchema = {
  properties: {
    limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Limit',
      default: 10,
    },
    offset: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Offset',
      default: 0,
    },
  },
  type: 'object',
  title: 'AdminUserRequest',
} as const

export const AdminUserSetRequestSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    admin: {
      type: 'boolean',
      title: 'Admin',
    },
  },
  type: 'object',
  required: ['id', 'admin'],
  title: 'AdminUserSetRequest',
} as const

export const ErrorResponseSchema = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'ErrorResponse',
} as const

export const GoogleLoginResponseSchema = {
  properties: {
    url: {
      type: 'string',
      title: 'Url',
    },
  },
  type: 'object',
  required: ['url'],
  title: 'GoogleLoginResponse',
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const

export const MovieAddRequestSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    image: {
      type: 'string',
      title: 'Image',
    },
    afisha_image: {
      type: 'string',
      title: 'Afisha Image',
    },
    lang: {
      type: 'string',
      title: 'Lang',
    },
    genre: {
      type: 'string',
      title: 'Genre',
    },
    time: {
      type: 'string',
      title: 'Time',
    },
    trailer: {
      type: 'string',
      title: 'Trailer',
    },
    price: {
      type: 'integer',
      title: 'Price',
    },
  },
  type: 'object',
  required: [
    'title',
    'description',
    'image',
    'afisha_image',
    'lang',
    'genre',
    'time',
    'trailer',
    'price',
  ],
  title: 'MovieAddRequest',
} as const

export const MovieRequestSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'MovieRequest',
} as const

export const MovieResponseSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    image: {
      type: 'string',
      title: 'Image',
    },
    afisha_image: {
      type: 'string',
      title: 'Afisha Image',
    },
    lang: {
      type: 'string',
      title: 'Lang',
    },
    genre: {
      type: 'string',
      title: 'Genre',
    },
    time: {
      type: 'string',
      title: 'Time',
    },
    trailer: {
      type: 'string',
      title: 'Trailer',
    },
    price: {
      type: 'integer',
      title: 'Price',
    },
    create_time: {
      type: 'string',
      format: 'date-time',
      title: 'Create Time',
    },
    update_time: {
      type: 'string',
      format: 'date-time',
      title: 'Update Time',
    },
  },
  type: 'object',
  required: [
    'id',
    'title',
    'description',
    'image',
    'afisha_image',
    'lang',
    'genre',
    'time',
    'trailer',
    'price',
    'create_time',
    'update_time',
  ],
  title: 'MovieResponse',
} as const

export const MovieSessionRequestSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'MovieSessionRequest',
} as const

export const MovieSessionsAddRequestSchema = {
  properties: {
    film_id: {
      type: 'integer',
      title: 'Film Id',
    },
    seats: {
      type: 'integer',
      title: 'Seats',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
  },
  type: 'object',
  required: ['film_id', 'seats', 'date'],
  title: 'MovieSessionsAddRequest',
} as const

export const MovieSessionsRequestSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'MovieSessionsRequest',
} as const

export const MovieSessionsResponseSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    film_id: {
      type: 'integer',
      title: 'Film Id',
    },
    seats: {
      type: 'integer',
      title: 'Seats',
    },
    seats_busy: {
      type: 'string',
      title: 'Seats Busy',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    create_time: {
      type: 'string',
      format: 'date-time',
      title: 'Create Time',
    },
    update_time: {
      type: 'string',
      format: 'date-time',
      title: 'Update Time',
    },
  },
  type: 'object',
  required: [
    'id',
    'film_id',
    'seats',
    'seats_busy',
    'date',
    'create_time',
    'update_time',
  ],
  title: 'MovieSessionsResponse',
} as const

export const MoviesRequestSchema = {
  properties: {
    limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Limit',
      default: 10,
    },
    offset: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Offset',
      default: 0,
    },
  },
  type: 'object',
  title: 'MoviesRequest',
} as const

export const MoviesSessionsAdminRequestSchema = {
  properties: {
    limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Limit',
      default: 10,
    },
    offset: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Offset',
      default: 0,
    },
  },
  type: 'object',
  title: 'MoviesSessionsAdminRequest',
} as const

export const PaymentProcessRequestSchema = {
  properties: {
    session_id: {
      type: 'integer',
      title: 'Session Id',
    },
    seats: {
      items: {
        type: 'integer',
      },
      type: 'array',
      title: 'Seats',
    },
    card_number: {
      type: 'string',
      title: 'Card Number',
    },
    card_name: {
      type: 'string',
      title: 'Card Name',
    },
    card_exp: {
      type: 'string',
      title: 'Card Exp',
    },
    card_cvv: {
      type: 'string',
      title: 'Card Cvv',
    },
  },
  type: 'object',
  required: [
    'session_id',
    'seats',
    'card_number',
    'card_name',
    'card_exp',
    'card_cvv',
  ],
  title: 'PaymentProcessRequest',
} as const

export const PaymentProcessResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
  },
  type: 'object',
  required: ['success'],
  title: 'PaymentProcessResponse',
} as const

export const UserMeResponseSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    email: {
      type: 'string',
      title: 'Email',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    picture: {
      type: 'string',
      title: 'Picture',
    },
    permission: {
      type: 'string',
      title: 'Permission',
    },
    register_time: {
      type: 'string',
      format: 'date-time',
      title: 'Register Time',
    },
  },
  type: 'object',
  required: ['id', 'email', 'name', 'picture', 'permission', 'register_time'],
  title: 'UserMeResponse',
} as const

export const UserTicketResponseSchema = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    film: {
      $ref: '#/components/schemas/MovieResponse',
    },
    seats: {
      items: {
        type: 'integer',
      },
      type: 'array',
      title: 'Seats',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    secret: {
      type: 'string',
      title: 'Secret',
    },
  },
  type: 'object',
  required: ['id', 'film', 'seats', 'date', 'secret'],
  title: 'UserTicketResponse',
} as const

export const UserTicketSignRequestSchema = {
  properties: {
    sign: {
      type: 'string',
      title: 'Sign',
    },
  },
  type: 'object',
  required: ['sign'],
  title: 'UserTicketSignRequest',
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const
